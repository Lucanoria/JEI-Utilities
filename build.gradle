plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

fancyGradle {
    patches {
        resources
        coremods
        codeChickenLib
        asm
        mergetool
    }
}

version = mod_version
group = mod_group
archivesBaseName = mod_archives_name + "-" + mc_version

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        def args = [
                "-Dfml.coreMods.load=com.github.vfyjxf.jeiutilities.asm.JeiUtilitiesLoadingPlugin",
                "-Dmixin.hotSwap=true",
                "-Dmixin.checks.interfaces=true",
                "-Dmixin.debug.export=true"
        ]
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            jvmArgs args
        }
        /* client only mod doesn't need server
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
        }
         */
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version,
                'mod_id': mod_id,
                'mod_name': mod_name,
                'mod_credits': mod_credits,
                'mod_author': mod_author,
                'mod_description': mod_description,
                'mc_version': mc_version,
                'mod_version': mod_version,
                'mod_logo': mod_logo
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = 'https://maven.blamejared.com'
        name = 'BlameJared Maven'
    }
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url 'https://maven.cleanroommc.com'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    implementation fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")
    //big recipe test
    runtimeOnly fg.deobf("curse.maven:extended-crafting-268387:2777071")
    runtimeOnly fg.deobf("curse.maven:cucumber-272335:2645867")
//    deobfCompile("zone.rong:mixinbooter:4.2")

    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:1.0.0'
    compileOnly('com.github.bsideup.jabel:jabel-javac-plugin:1.0.0') {
        transitive = false
    }

    compileOnly 'org.jetbrains:annotations:24.1.0'
    annotationProcessor 'org.jetbrains:annotations:24.1.0'

    //mixin booter
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'


    implementation('zone.rong:mixinbooter:9.1') {
        transitive = false
    }
    annotationProcessor('zone.rong:mixinbooter:9.1') {
        transitive = false
    }
}

mixin {
    add sourceSets.main, 'jeiutilities.refmap.json'
}

jar {
    manifest {
        attributes([
                'FMLCorePlugin'              : 'com.github.vfyjxf.jeiutilities.asm.JeiUtilitiesLoadingPlugin',
                'ForceLoadAsMod'             : true,
                'FMLCorePluginContainsFMLMod': 'true'
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = 17
    options.release.set(8)
    javaCompiler.set(javaToolchains.compilerFor {
        languageVersion.set(JavaLanguageVersion.of(17))
    })
}